# When built from RPM, the below version of "0.0.0" will be
# replaced with the version in the spec file
policy_module(pulp-celery, 0.0.0)
type celery_t;
type celery_exec_t;
init_daemon_domain(celery_t, celery_exec_t)

type pulp_var_cache_t;
files_type(pulp_var_cache_t)

type pulp_var_run_t;
files_pid_file(pulp_var_run_t)

type pulp_tmp_t;
files_tmp_file(pulp_tmp_t)

require {
        type celery_t;
        type httpd_sys_rw_content_t;
        type pstore_t;
        type pulp_var_run_t;
        type pulp_tmp_t;
        type pulp_var_cache_t;
        type pulp_cert_t;
        type puppet_etc_t;
        type qpidd_t;
        type qpidd_var_lib_t;
        type tmp_t;
        type tmpfs_t;
        type sysfs_t;
        class sock_file { create link unlink write };
        class unix_stream_socket connectto;
        class dir { add_name create getattr open read relabelfrom relabelto remove_name rename reparent rmdir search setattr write };
        class file { lock rename write setattr getattr read create link unlink open relabelto relabelfrom map };
        class filesystem getattr;
        class process { setsched signal signull execmem };
        class tcp_socket { connect create getattr getopt read setopt shutdown write };
        class lnk_file { create read getattr unlink relabelto relabelfrom };
        class netlink_route_socket { bind create getattr nlmsg_read write read };
        class udp_socket { ioctl create getattr connect write read };
        class unix_dgram_socket { create connect };
}

#============= celery_t ==============
#
# tcp_socket { shutdown } is needed for CentOS 6 `sudo service pulp_workers restart`
#

allow celery_t pstore_t:filesystem getattr;
allow celery_t pulp_var_cache_t:file map;
allow celery_t self:netlink_route_socket r_netlink_socket_perms;
allow celery_t self:process { signal signull execmem };
allow celery_t self:udp_socket { ioctl getattr create connect write read };
allow celery_t self:unix_dgram_socket { create connect };
allow celery_t sysfs_t:dir read;
allow celery_t tmpfs_t:filesystem getattr;
allow celery_t tmpfs_t:dir { write add_name remove_name };
allow celery_t tmpfs_t:file { create open read write link getattr unlink };


#============= qpidd_t ==============
#
# Qpid should fix this internally, remove this block when https://bugzilla.redhat.com/show_bug.cgi?id=1519948 is resolved
#

allow qpidd_t qpidd_var_lib_t:file map;


######################################
#
# pulp_rpm publish call to createrepo for generating sqlite files
#

allow celery_t self:process { setsched };

allow celery_t pulp_tmp_t:dir manage_dir_perms;
files_tmp_filetrans(celery_t, pulp_tmp_t, dir)

allow celery_t pulp_tmp_t:file manage_file_perms;
files_tmp_filetrans(celery_t, pulp_tmp_t, file)

allow celery_t pulp_var_run_t:file manage_file_perms;
# dir access needed when celery searches for existing pid files on startup
allow celery_t pulp_var_run_t:dir manage_dir_perms;
files_pid_filetrans(celery_t, pulp_var_run_t, file)



ifndef(`distro_rhel6', `
    fs_getattr_xattr_fs(celery_t)
')


######################################
#
# pulp_ostree sync call on F23 calls out to gpg
# temporary workaround for https://pulp.plan.io/issues/1731

allow celery_t self:process { setrlimit };

######################################


##### Certs #####

## Repo deletion requires custom certs to be removed in tasks
manage_dirs_pattern(celery_t, pulp_cert_t, pulp_cert_t)
manage_files_pattern(celery_t, pulp_cert_t, pulp_cert_t)

# custom SSL certificates reading
ifdef(`distro_rhel6', `
    miscfiles_read_certs(celery_t)
',`
    miscfiles_read_generic_certs(celery_t)
')

######################################
#
# Pulp workers need temporary working directories to perform various tasks.  This policy allows
# management of files and directories. The default root directory is /var/cache/pulp.
#

allow celery_t pulp_var_cache_t:lnk_file { create read getattr unlink };
manage_dirs_pattern(celery_t, pulp_var_cache_t, pulp_var_cache_t)
manage_files_pattern(celery_t, pulp_var_cache_t, pulp_var_cache_t)

######################################

apache_delete_sys_content_rw(celery_t)
apache_list_sys_content(celery_t)
apache_manage_sys_content_rw(celery_t)
apache_read_sys_content(celery_t)
corecmd_exec_bin(celery_t)
corecmd_exec_shell(celery_t)
corecmd_read_bin_symlinks(celery_t)
dev_getattr_fs(celery_t)
dev_read_urand(celery_t)
files_rw_pid_dirs(celery_t)
fs_getattr_cgroup(celery_t)
fs_getattr_hugetlbfs(celery_t)
kernel_getattr_debugfs(celery_t)
kernel_read_system_state(celery_t)
libs_exec_ldconfig(celery_t)
logging_send_syslog_msg(celery_t)
miscfiles_read_localization(celery_t)
miscfiles_manage_cert_dirs(celery_t)
seutil_read_default_contexts(celery_t)
sysnet_read_config(celery_t)
term_getattr_pty_fs(celery_t)

######################################
#
# Pulp workers do network related things including:
#  - perform DNS queries
#  - connect to mongod and amqp. This is required for correct processing of tasks
#  - sync data to/from remote hosts via HTTP/HTTPS
#  - send e-mail using SMTP for notification purposes
#  - use a network proxy
#
# Pulp allows several protocols above to be used over non-standard ports so all ports are allowed.
# Users who want additional network security can use a firewall at the host or network level for
# additional protection.
#

allow celery_t self:tcp_socket create_stream_socket_perms;
auth_use_nsswitch(celery_t)
corenet_tcp_connect_all_ports(celery_t)
corenet_tcp_bind_all_ports(celery_t)
corenet_tcp_bind_generic_node(celery_t)

######################################
#
# Pulp workers need to do selinux relabeling as part of publishing.
#

selinux_validate_context(celery_t)
ifdef(`distro_rhel6', `
    seutil_search_default_contexts(celery_t)
    seutil_read_file_contexts(celery_t)
    domain_obj_id_change_exemption(celery_t)
')


allow celery_t httpd_sys_rw_content_t:dir relabelto;
allow celery_t httpd_sys_rw_content_t:file relabelto;
allow celery_t httpd_sys_rw_content_t:lnk_file relabelto;
allow celery_t pulp_var_cache_t:dir relabelfrom;
allow celery_t pulp_var_cache_t:file relabelfrom;
allow celery_t pulp_var_cache_t:lnk_file relabelfrom;


######################################
#
# Adds a SELinux boolean called pulp_manage_puppet that enables Pulp to manage puppet_etc_t
# directories, files, and symlinks. The puppet_etc_t label is applied to /etc/puppet/*. Defaults to
# false.
#

gen_tunable(pulp_manage_puppet, false)

optional_policy(`
    tunable_policy(`pulp_manage_puppet', `
        # Puppet modules can contain symlinks, though it seems they often do not. This line allows
        # Pulp to install the symlinks if they are present.
        allow celery_t puppet_etc_t:dir { add_name create getattr open read remove_name rename reparent rmdir search setattr write};
        allow celery_t puppet_etc_t:file { create getattr open setattr write };
        allow celery_t puppet_etc_t:lnk_file { create read getattr unlink };
        manage_dirs_pattern(celery_t, puppet_etc_t, puppet_etc_t)
        manage_files_pattern(celery_t, puppet_etc_t, puppet_etc_t)
        puppet_read_config(celery_t)
    ')
')

######################################
#
# Adds a SELinux boolean called pulp_manage_rsync that enables Pulp to execute rsync and ssh.
# Defaults to false.
#

gen_tunable(pulp_manage_rsync, false)

optional_policy(`
    tunable_policy(`pulp_manage_rsync', `
        # Pulp executes rsync over ssh. Pulp needs to write to /var directories. Allow creation of
        # a socket file. Allow managing a socket.
        rsync_exec(celery_t)
        ssh_exec(celery_t)
        files_write_var_dirs(celery_t)
        allow celery_t tmp_t:sock_file { create link unlink write };
        allow celery_t self:unix_stream_socket { create_stream_socket_perms connectto };
    ')
')

######################################
#
# ostree needs to be able to execute gpg, but both ostree and the gpg_exec directive are
# unavailable on el6.
#

ifndef(`distro_rhel6', `
    gpg_exec(celery_t)
')

######################################
#
# rpm_exec is needed with the startup of pulp_workers and pulp_resource_manager on systemd based
# systems
#

ifndef(`distro_rhel6', `
    rpm_exec(celery_t)
')

######################################
#
# systemd start/stop/restart related
# EL6 does not use systemd
#

ifndef(`distro_rhel6', `
    auth_read_passwd(celery_t)
')

######################################

######################################
#
# Allow tmpfs exec on Fedoras only
# (fedora distro is redhat, RHEL distro is set to rhel6 rhel7)
#

ifdef(`distro_redhat', `
    fs_exec_tmpfs_files(celery_t)
')

######################################
