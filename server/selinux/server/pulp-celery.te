# When built from RPM, the below version of "0.0.0" will be
# replaced with the version in the spec file
policy_module(pulp-celery, 0.0.0)
type celery_t;
type celery_exec_t;
init_daemon_domain(celery_t, celery_exec_t)

type pulp_var_cache_t;
files_type(pulp_var_cache_t)

require {
        type celery_t;
        type pulp_var_cache_t;
        type pulp_cert_t;
        type puppet_etc_t;
        type var_run_t;
        class dir { getattr search write remove_name create add_name rmdir };
        class file { lock rename write setattr getattr read create unlink open };
        class process { setsched signal signull };
        class tcp_socket { connect create getattr getopt read setopt shutdown write };
        class lnk_file { create read getattr unlink};
        class netlink_route_socket { bind create getattr nlmsg_read write read };
        class udp_socket { ioctl create getattr connect write read };
        class unix_dgram_socket { create connect };
}

#============= celery_t ==============
#
# tcp_socket { shutdown } is needed for CentOS 6 `sudo service pulp_workers restart`
#

allow celery_t self:netlink_route_socket { bind create getattr nlmsg_read write read };
allow celery_t self:process { signal signull };
allow celery_t self:udp_socket { ioctl getattr create connect write read };
allow celery_t self:unix_dgram_socket { create connect };

######################################
#
# pulp_rpm publish call to createrepo for generating sqlite files
#

allow celery_t self:process { setsched };
allow celery_t tmp_t:dir { write remove_name create add_name rmdir setattr };
allow celery_t tmp_t:file { rename create unlink setattr write read getattr open lock };

ifndef(`distro_rhel6', `
    fs_getattr_xattr_fs(celery_t)
')

######################################
#
#
#

allow celery_t pulp_cert_t:dir { getattr search };
allow celery_t pulp_cert_t:file { read write getattr open };

# custom SSL certificates reading
ifdef(`distro_rhel6', `
    miscfiles_read_certs(celery_t)
',`
    miscfiles_read_generic_certs(celery_t)
')

######################################
#
# Pulp workers need temporary working directories to perform various tasks.  This policy allows
# management of files and directories. The default root directory is /var/cache/pulp.
#

allow celery_t pulp_var_cache_t:lnk_file { create read getattr unlink };
manage_dirs_pattern(celery_t, pulp_var_cache_t, pulp_var_cache_t)
manage_files_pattern(celery_t, pulp_var_cache_t, pulp_var_cache_t)

######################################

allow celery_t var_run_t:file { write getattr read create unlink open };
apache_delete_sys_content_rw(celery_t)
apache_list_sys_content(celery_t)
apache_manage_sys_content_rw(celery_t)
apache_read_sys_content(celery_t)
corecmd_exec_bin(celery_t)
corecmd_exec_shell(celery_t)
corecmd_read_bin_symlinks(celery_t)
dev_read_urand(celery_t)
files_list_tmp(celery_t)
files_rw_pid_dirs(celery_t)
kernel_read_system_state(celery_t)
libs_exec_ldconfig(celery_t)
logging_send_syslog_msg(celery_t)
miscfiles_read_localization(celery_t)
miscfiles_manage_cert_dirs(celery_t)
sysnet_read_config(celery_t)

######################################
#
# Pulp workers do network related things including:
#  - connect to mongod and amqp. This is required for correct processing of tasks
#  - sync data to/from remote hosts via HTTP/HTTPS
#  - send e-mail using SMTP for notification purposes
#  - use a network proxy
#
# Pulp allows several protocols above to be used over non-standard ports so all ports are allowed.
# Users who want additional network security can use a firewall at the host or network level for
# additional protection.
#

allow celery_t self:tcp_socket create_stream_socket_perms;
corenet_tcp_connect_all_ports(celery_t)
corenet_tcp_bind_all_ports(celery_t)
corenet_tcp_bind_generic_node(celery_t)

######################################
#
# Adds a SELinux boolean called pulp_manage_puppet that enables Pulp to manage puppet_etc_t
# directories, files, and symlinks. The puppet_etc_t label is applied to /etc/puppet/*. Defaults to
# false.
#

gen_tunable(pulp_manage_puppet, false)

optional_policy(`
    tunable_policy(`pulp_manage_puppet', `
        # Puppet modules can contain symlinks, though it seems they often do not. This line allows
        # Pulp to install the symlinks if they are present.
        allow celery_t puppet_etc_t:lnk_file { create read getattr unlink };
        manage_dirs_pattern(celery_t, puppet_etc_t, puppet_etc_t)
        manage_files_pattern(celery_t, puppet_etc_t, puppet_etc_t)
    ')
')

######################################
#
# rpm_exec is needed with the startup of pulp_workers and pulp_resource_manager on systemd based
# systems
#

ifndef(`distro_rhel6', `
    rpm_exec(celery_t)
')

######################################
#
# We can't include this reference policy statement in EL6 because it doesn't know this definition
# I'm not sure why the allow statements provided by the auth_read_passwd are not needed on EL6
#

ifndef(`distro_rhel6', `
    auth_read_passwd(celery_t)
')

######################################
