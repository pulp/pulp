======================
Pulp 2.4 Release Notes
======================

Pulp 2.4.0
==========

New Features
------------

#. An all-new distributed task system based on `Celery <http://celeryproject.org>`_.
#. All of ``/var/lib/pulp`` can now be a shared filesystem.
#. Username/password authentication for MongoDB.  Requirement for python-pymongo was updated to
   version 2.5.2.
#. Publishing Puppet repositories to flattened directories.
#. All messaging between the Pulp server and agents is signed and authenticated using asymmetric
   keys. Public keys are exchanged during registration. Upgraded installations with existing consumers
   must run: ``pulp-consumer update --keys`` and restart the goferd service for messaging between
   the server and agent to continue working properly.
#. Pulp now uses syslog for all log messages, rather than writing its own log files as in previous
   releases. Please see our :ref:`logging` documentation for details, as Pulp does not write to
   ``/var/log/pulp/`` as it used to.
#. Pulp also has eliminated the ``/etc/pulp/logging/`` folder, as well as the entire ``[logs]``
   section of ``/etc/pulp/server.conf``. All logging configuration has been replaced with a single
   ``log_level`` setting in the ``[server]`` section of ``/etc/pulp/server.conf``, and it is also
   optional.
#. Pulp's server.conf can now be completely empty, and Pulp will choose sane defaults for each
   setting. The server.conf that comes with a new Pulp server installation has all of the settings
   commented and set to the default values. Due to this, the OAuth key and secret fields are no
   longer automatically populated and users will need to provide these values when they wish to
   configure Pulp installations to use OAuth. OAuth is now disabled by default.
#. Pulp has tightened the security in version 2.4.0 by adding functionality to validate the server
   SSL certificate against the trusted CA certificate. More information about these certificates
   generated at the install time can be found in the :ref:`Installation Guide <ssl_validation>`.

Deprecation
-----------

Pulp uses the Python oauth2 library to perform OAuth. Unfortunately, that library seems to be
unmaintained upstream and has at least one known security flaw, and so the Pulp team was faced with
finding a replacement, writing a replacement, or removing OAuth as an authentication mechanism. The
Pulp team does not believe there is a strong use case for OAuth in Pulp, and so it has been decided
that Pulp 2.4.0 would announce the deprecation of OAuth.

Client Changes
--------------
#. Converted the orphan remove command to poll until the remove finishes.  Added a background
   flag to match the pattern the other polling commands.
#. The behavior of commands requiring agent participation have changed. The *Waiting to begin...*
   text displayed by the spinner now indicates that a task has been created and that a request
   has been sent to the agent but that the agent has not yet accepted the request. Once the agent
   has accepted the request, the text displayed by the spinner will change to indicate this. The
   spinner will continue until the agent begins executing the request. Agent related tasks no
   longer have a timeout, so it's up to the caller to determine how long to wait for completion.
   It is the responsibility of the caller to cancel tasks not progressing as desired.


Agent Changes
-------------
#. The pulp-agent service link is no longer installed.  In previous versions, the pulp-agent service
   was just a simlink to goferd.  Users should interact with the goferd service directly.
#. goferd 1.3.0+ supports control by systemd.

Noteworthy Bugs Fixed
---------------------

RFE Bugs
--------

All Bugs
--------
You can see the complete list of bugs that were
`fixed in Pulp 2.4.0 <https://bugzilla.redhat.com/buglist.cgi?list_id=1242840&resolution=---&resolution=CURRENTRELEASE&classification=Community&target_release=2.4.0&query_format=advanced&bug_status=VERIFIED&bug_status=CLOSED&component=admin-client&component=bindings&component=consumer-client%2Fagent&component=consumers&component=coordinator&component=documentation&component=events&component=nodes&component=okaara&component=rel-eng&component=repositories&component=rest-api&component=selinux&component=upgrade&component=users&component=z_other&product=Pulp>`_.

.. _2.3.x_upgrade_to_2.4.0:

Upgrade Instructions for 2.3.x --> 2.4.0
----------------------------------------

Upgrading from 2.3.x --> 2.4.0 requires all components to be upgraded together. Pulp 2.3.x servers
and nodes are not compatible with Pulp 2.4.0 and vice versa. All consumers must be upgraded first,
but will not be usable until they are re-registered with their new Pulp 2.4.0 server or node.

The 2.3.x --> 2.4.0 server or node upgrade process require all associated consumers to either be
upgraded or off. The upgrade process will not continue if there are active 2.3.x consumers still
connected to the message bus. After the server and node installations are upgraded, the upgraded
consumers need to be re-registered.

To upgrade a consumer from 2.3.x --> 2.4.0, run the command ``sudo yum groupupdate pulp-consumer``

The upgrade will create a file called ``consumer.conf.rpmnew``, which contains the default
``consumer.conf`` for Pulp 2.4.0 consumers. The new ``consumer.conf.rpmnew`` file needs to be
merged into your existing ``consumer.conf`` by hand as new, required configuration properties are
introduced with 2.4.0, but portions of the old config will likely still be useful.

Once the consumer.conf file is setup to use the new configuration, restart the consumer. On
Upstart systems the restart is done using::

    $ sudo service goferd restart

For systemd systems::

    $ sudo systemctl restart goferd

A message broker is required for Pulp 2.4.0. Pulp 2.3.x required Qpid specifically as the message
broker, but Pulp 2.4 will work with either Qpid or RabbitMQ. If using Qpid, ensure that you are
using Qpid 0.18 or later. Any Pulp 2.4.0 server or node that is being used with Qpid, also
requires a new client library dependency to be installed on the server or node by running::

    $ sudo yum install python-qpid-qmf python-qpid

.. note::
   If using Qpid, you will also need to install either the 'qpid-cpp-server-store' or
   'qpid-cpp-server-linearstore' package. The 'qpid-cpp-server-linearstore' is better performing,
   but may not available in all versions. You can install 'qpid-cpp-server-store' using the
   command: ``sudo yum install qpid-cpp-server-store``

To upgrade to the new Pulp release from version 2.3.x, you should begin by using yum to install the
latest RPMs from the Pulp repository and run the database migrations::

    $ sudo yum upgrade
    $ sudo -u apache pulp-manage-db  # run this as the same user apache runs as

You can remove ``/etc/pulp/logging/`` if you like, as it is no longer used. Also, you can
optionally edit the new ``log_level`` setting in the ``[server]`` section of
``/etc/pulp/server.conf`` to your preference::

    $ sudo rm -rf /etc/pulp/logging/
    $ sudo $EDITOR /etc/pulp/server.conf

Pulp 2.4.0 has an added functionality to validate the server SSL certificate against
trusted CA certificates. To take advantage of it, you can run ``pulp-gen-ca-certificate``
to generate a CA certificate, SSL certificate and respective private keys. You can also generate
and use your own certificates and configure them under the [security] section in
``/etc/pulp/server.conf``. More information can be found in the
:ref:`Installation Guide <ssl_validation>`. After generating these certificates and restarting
apache, you will need to copy and add the CA certificate to the trusted CA certificates
on the consumers and hosts running pulp-admin install. For pulp-admin, you can follow instructions
located at :ref:`Installation Guide <admin_trusted_ca_installtion>`. For consumers, you can
refer to :ref:`Installation Guide <consumer_trusted_ca_installtion>`. You can also take a look
at :ref:`Troubleshooting guide <troubleshooting_ssl_issues>` if you run into any certificate
verification issues.

Pulp 2.4.0 comes with some new services that perform distributed tasks using Celery. You can read
about this more in the :ref:`Installation Guide <distributed_workers_installation>`. You will need
to enable Pulp's workers on at least one machine. Edit ``/etc/default/pulp_workers`` to your liking,
and then enable and start the ``pulp_workers`` service. For Upstart systems::

    $ sudo chkconfig pulp_workers on
    $ sudo service pulp_workers start

For systemd systems::

    $ sudo systemctl enable pulp_workers
    $ sudo systemctl start pulp_workers

.. warning::
   If you distribute Pulp across more than one server either through load balancing the HTTP
   requests, or through running pulp_workers on more than one machine, it is very important that you
   provide ``/var/lib/pulp`` as a shared filesystem to each host that is participating in the Pulp
   installation.

There are two more services that need to be running, but it is very important that only one instance
of each of these runs across the entire Pulp installation.

.. warning::
   ``pulp_celerybeat`` and ``pulp_resource_manager`` must both be singletons, so be sure that
   you only enable each of these on one host. They do not have to run on the same host, however.
   Note that each Pulp child node will also need its own instance of each of these services, as
   a Pulp child node is technically a separate distributed application from its parent.

On the host(s) that will run these two services (they do not have to run on the same host), edit
``/etc/default/pulp_celerybeat`` and ``/etc/default/pulp_resource_manager`` to your liking. Then
enable and start the services. For Upstart::

    $ sudo chkconfig pulp_celerybeat on
    $ sudo service pulp_celerybeat start
    $ sudo chkconfig pulp_resource_manager on
    $ sudo service pulp_resource_manager start

For systemd::

    $ sudo systemctl enable pulp_celerybeat
    $ sudo systemctl start pulp_celerybeat
    $ sudo systemctl enable pulp_resource_manager
    $ sudo systemctl start pulp_resource_manager

After all Pulp servers and nodes have been upgraded, all consumers need to be re-registered. On
each registered consumer, run ``pulp-consumer update --keys`` to exchange RSA keys needed for
message authentication.


Rest API Changes
----------------

Call Reports
^^^^^^^^^^^^

Every API that returns a Call Report with an HTTP 202 ACCEPTED response code has changed. For the
sake of brevity, we will not list every API that returns 202 here. The structure of the Call Report
has been changed significantly. The
`2.3 Call Report <https://pulp-dev-guide.readthedocs.org/en/pulp-2.3/conventions/sync-v-async.html#call-report>`_
had many more fields than the
`2.4 Call Report <https://pulp-dev-guide.readthedocs.org/en/pulp-2.4/conventions/sync-v-async.html#call-report>`_
does. The spawned_tasks list within the Call Report object does not contain the full list of all
tasks that will be scheduled for a given call. Each spawned task is responsible for spawning
whatever additional tasks are needed in order to complete processing. For example, the sync task
with auto publishing enabled returns a Call Report that only lists the task_id for the sync portion
of the work. When the sync task finishes it will have the task created for publishing listed in
the spawned_tasks field.

Scheduled Calls
^^^^^^^^^^^^^^^

The `Scheduled Call data structure <https://pulp-dev-guide.readthedocs.org/en/latest/conventions/scheduled.html#scheduled-tasks>`_
 has changed substantially.

* ``last_run`` is now ``last_run_at``.
* ``args`` and ``kwargs`` are now top-level attributes of the object.
* ``task`` is a new attribute that is the python path to the task this schedule will execute.
* ``resource`` is a new attribute that is a globally-unique identifier for the object.
  this task will operate on. It is used internally to query schedules based on a given resource.

CRUD operations on schedules no longer depend on resource locking, so these API
operations will never return a 202 or 409.

Schedule delete no longer returns a 404 when the schedule is not found. It will
return a 200, because this is exactly the condition the user asked for.

Other Changes
^^^^^^^^^^^^^

Here are other APIs that have changed, arranged by path:

``/v2/queued_calls/``

    This API has been removed in 2.4, as queued and running tasks are accessed through the same
    `Tasks API <https://pulp-dev-guide.readthedocs.org/en/pulp-2.4/integration/rest-api/dispatch/task.html#task-report>`_.

``/v2/queued_calls/<call_request_id>/``

    This API has been removed in 2.4, as queued and running tasks are accessed through the same
    `Tasks API <https://pulp-dev-guide.readthedocs.org/en/pulp-2.4/integration/rest-api/dispatch/task.html#task-report>`_.

``/v2/task_groups/``

    This API has been removed in 2.4, as there is no longer any concept of Task Groups.

``/v2/task_groups/<call_request_group_id>/``

    This API has been removed in 2.4, as there is no longer any concept of Task Groups.

``/v2/tasks/<task_id>/``

    Pulp 2.4 has replaced the tasking system with a new distributed task system. Due to this
    change, the data structure returned by the tasks API has changed. One notable change is that
    this API now returns something we call a Task Report, when it used to return a Call Report. The
    term Call Report is still used in Pulp 2.4 to refer to the returned data structure from all
    APIs that use the HTTP 202 code. That object has links to this API, which returns a Task Report.
    The notable difference is that the Task Report contains much greater detail. Some notable
    differences between the 2.3 Call Report and the 2.4 Task Report:

    * The following attributes no longer exist: ``response``, ``reasons``, ``task_group_id``,
      and ``schedule_id``.
    * The ``traceback`` and ``exception`` attributes have been deprecated in 2.4 and will always
      be null.
    * The ``progress`` attribute has been renamed to ``progress_report``.
    * The following attributes are new in 2.4: ``task_type``, ``queue``, ``error``, and
      ``spawned_tasks``.

    Feel free to compare the
    `2.3 Call Report API <https://pulp-dev-guide.readthedocs.org/en/pulp-2.3/integration/rest-api/dispatch/task.html#polling-task-progress>`_
    and the
    `2.4 Task Report API <https://pulp-dev-guide.readthedocs.org/en/pulp-2.4/integration/rest-api/dispatch/task.html#task-report>`_
    on your own.

``/v2/tasks/search/``

    This is a new API to search tasks by criteria.

``/v2/catalog/<source_id>/``

    This is a new API.

``/v2/repositories/``
    Documentation for POST states that each distributor object should contain a
    key named ``distributor_type_id``, but the API was actually requiring it to
    be named ``distributor_type``. The API has been changed to match the
    documentation, so any code providing distributors to that API will need to
    be modified.

* Deleting units is no longer blocked when the user performing the delete is different
  than the user that created the unit. This most notably has the effect of eliminating
  the restriction that units could not be deleted from repositories that are synced via a feed.
  However, if a unit is deleted from a repo populated via a feed, syncing the repo again will
  recreate the unit.
* The exception and traceback fields have been deprecated from the Call Report and Task Status
  objects. In place of those fields a new "error" object has been created and will be returned.
* TaskGroups are no longer supported. All uses of the task_group_id have been removed.
* When asynchronous tasks are created they will be returned in the waiting state. The
  postponed or rejected states are no longer supported.
* Agent related tasks no longer timeout, and it is now at the caller's discretion as to how long
  to wait for task completion. The task *state* now reflects the progression of the task on the
  agent.
* The original applicability generation API didn't allow a consumer to request regeneration of its
  own applicability. To allow this, we have introduced a new API which can be used by consumers and
  is documented on the same page as other applicability APIs.

``/v2/content/actions/delete_orphans/``

    This has been deprecated in version 2.4, in favor of ``/v2/content/orphans/``.

Binding API Changes
-------------------

* Our pulp.bindings.responses.Task model has changed substantially to reflect our changes in the Task API in
  the REST API:

   #. The ``call_request_group_id`` attribute no longer exists.
   #. The ``call_request_id`` attribute has been renamed to ``task_id``.
   #. The ``call_request_tags`` attribute has been renamed to ``tags``.
   #. The ``reasons`` attribute no longer exists, as Tasks cannot be postponed or rejected anymore.
   #. The ``progress`` attribute has been renamed to ``progress_report`` to reflect the same name change in
      the API.
   #. The ``response`` attribute no longer exists, as Tasks cannot be postponed or rejected anymore.
   #. The ``is_rejected()`` and ``is_postponed()`` methods have been removed.

* Our ``pulp.bindings.repository.update_repo_and_plugins(...)`` method has been deprecated in favor of
  ``pulp.bindings.repository.update(...)``.

Plugin API Changes
------------------

If you are a plugin author, these changes are relevant to you:

* The Importer and Distributor cancellation method signatures have changed. ``cancel_sync_repo()``
  and ``cancel_publish_repo()`` both used to take multiple arguments. With the conversion to Celery,
  we no longer had a need for those extra arguments, so each call now receives only the Importer or
  Distributor instance (self). If you have written an Importer or a Distributor, you will need to
  adjust your method signatures accordingly in order to work with this release of Pulp.


Pulp 2.4.1
==========

Rest API Changes
----------------

* The timestamps returned for the following objects and fields have been converted from an
  ISO 8601 timestamp with a timezone offset to native ISO 8601 timestamps in UTC

  #. Repository Distributor (last_published)
  #. Repository Group Distributor (last_published)
  #. Repository Publish Results (started, completed)
  #. Repository Group Publish Results (started, completed)
  #. Repository Importer (last_sync)
  #. Repository Importer Sync Results (started, completed)
