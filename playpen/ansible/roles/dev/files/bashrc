# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Source independant bashrc additions if they exist
if [ -f $HOME/devel/.localrc ]; then
    . $HOME/devel/.localrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
# If adding new functions to this file, note that you can add help text to the function
# by defining a variable with name _<function>_help containing the help text

# Set up virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export VIRTUALENV_USE_DISTRIBUTE=true
export PIP_RESPECT_VIRTUALENV=true
source /usr/bin/virtualenvwrapper.sh

alias phttp="http --verify no --cert ~/.pulp/user-cert.pem"

REPOS=("pulp" "pulp_deb" "pulp_docker" "pulp_openstack" "pulp_ostree" "pulp_puppet" "pulp_python" "pulp_rpm")
SERVICES=("goferd" "httpd" "pulp_workers" "pulp_celerybeat" "pulp_resource_manager" "pulp_streamer")

pstart() {
    _paction start
}
_pstart_help="Start all pulp-related services"

pstop() {
    _paction stop
}
_pstop_help="Stop all pulp-related services"

prestart() {
    _paction restart
}
_prestart_help="Restart all pulp-related services"

pstatus() {
    _paction status
}
_pstatus_help="Report the status of all pulp-related services"

preset() {
    echo "Due to its similarity to 'prestart', 'preset' has been renamed to 'pclean'."
    echo "Please use 'pclean' instead, and remember to update any script that might be calling it."
    sleep 3
    pclean
}
# intentionally undocumented, only list pclean in help for this

pclean() {
    pstop;

    pushd ~/devel/
    # Remove and unlink all development files in reverse order (uninstall pulp last)
    for (( idx=${#REPOS[@]} ; idx>0 ; idx-- )) ; do
        repo="${REPOS[idx-1]}"
        if [ -d $repo ]; then
            pushd $repo
            sudo ./pulp-dev.py -U
            popd
        fi
    done

    # Destroy mongo DB and clean up pulp-related files
    mongo pulp_database ~/drop_database.js;
    sudo rm -rf /var/lib/pulp/*;
    find ~/devel/pulp* -name '*.py[co]' -delete;
    rm -f ~/.pulp/user-cert.pem

    # Re-install and relink development files
    for repo in ${REPOS[@]}; do
        if [ -d $repo ]; then
            pushd $repo
            sudo ./pulp-dev.py -I
            popd
        fi
    done
    popd

    sudo -u apache pulp-manage-db;
    setup_crane_links;
    pstart;
    ppopulate;
}
_pclean_help="Restore pulp to a clean-installed state"
# can get away with not resetting terminal settings here since it gets reset in phelp
_pclean_help="$_pclean_help - `setterm -foreground red -bold on`THIS DESTROYS YOUR PULP DATA"

pjournal() {
    # build up the journalctl cmdline per-unit
    journal_cmd="journalctl"
    for svc in ${SERVICES[@]}; do
        journal_cmd="$journal_cmd -u $svc"
    done

    if [ -z $1 ]; then
        # not passed any args, follow the units' journals by default
        $journal_cmd -f
    else
        # passed some args, send all args through to journalctl
        $journal_cmd $@
    fi
}
_pjournal_help="Interact with the journal for pulp-related units
    pjournal takes optional journalctl args e.g. 'pjournal -r', runs pjournal -f by default"

ptests() {
    pushd $HOME/devel;
    for repo in ${REPOS[@]}; do
        if [ -d $repo ]; then
            pushd $repo;
            workon $repo;
            ./run-tests.py -x --enable-coverage;
            deactivate;
            popd;
        fi
    done;
    popd;
}
_ptests_help="Run tests for pulp and all installed plugins/services"

_paction() {
    sudo systemctl $1 ${SERVICES[@]}
}

psmash() {
    # We start and end with {push,pop}d because workon changes CWD and we don't want to user's CWD
    # to be altered when they type pulp-smash. We also want to maintain their active venv.
    if [ ! -z $VIRTUAL_ENV ]; then
        _original_venv=`basename $VIRTUAL_ENV`
    fi
    pushd ~;
    workon pulp-smash;
    prestart;
    _return_code=1
    if make lint test
    then
        py.test ~/devel/pulp-smash/pulp_smash;
        _return_code=$?
    fi
    if [ -z $_original_venv ]; then
        deactivate;
    else
        workon $_original_venv
    fi
    popd;
    return $_return_code
}
_psmash_help="Run pulp smash against the currently running pulp installation"

ppopulate() {
    if [ ! -f $HOME/.pulp/user-cert.pem ]; then
        pulp-admin login -u admin -p admin
    fi

    if [ -d $HOME/devel/pulp_docker ]; then
        pulp-admin docker repo create --repo-id busybox-v1 --feed https://index.docker.io \
            --upstream-name busybox --enable-v1 true --enable-v2 false
        pulp-admin docker repo create --repo-id busybox --feed https://registry-1.docker.io \
            --upstream-name busybox --enable-v1 false --enable-v2 true
    fi

    if [ -d $HOME/devel/pulp_rpm ]; then
        pulp-admin rpm repo create --repo-id=zoo \
            --feed=https://repos.fedorapeople.org/repos/pulp/pulp/demo_repos/zoo/
    fi

    if [ -d $HOME/devel/pulp_puppet ]; then
        pulp-admin puppet repo create --repo-id=forge \
            --feed=http://forge.puppetlabs.com \
            --queries=torssh
    fi

    if [ -d $HOME/devel/pulp_python ]; then
        pulp-admin python repo create --repo-id=pypi \
            --feed=https://pypi.python.org/ \
            --package-names=pip
    fi
}
_ppopulate_help="Populate pulp with repositories"

pprocs() {
    print_procs() {
        # prints a header string with number of pids, list of pids, and a newline spacer
        # $1 is the header string, $2 is a newline-separated list of pids, see usage below
        echo "$1 ($(echo $2|wc -w)):"
        echo $2
        echo
    }

    # override IFS to prevent bash splitting pgrep output on newlines
    IFS=''
    print_procs "Pulp worker processes" `pgrep -f "pulp.server.async.app -c 1"`
    print_procs "Pulp Resource Manager processes" `pgrep -f "pulp.server.async.app -n resource_manager"`
    print_procs "Pulp Celerybeat processes:" `pgrep -f "pulp.server.async.celery_instance.celery"`
    print_procs "Pulp WSGI processes:" `pgrep -f "wsgi:pulp"`
    unset IFS
}
_pprocs_help="Print running pulp processes IDs"

pdebug() {
    telnet 127.0.0.1 4444
}
_pdebug_help="Telnet to a debugger listening locally on port 4444"

phelp() {
    # get a list of declared functions, filter out ones with leading underscores as "private"
    funcs=$(declare -F | awk '{ print $3 }'| grep -v ^_)

    # for each func, if a help string is defined, assume it's a pulp function and print its help
    # (this is bash introspection via variable variables)
    for func in $funcs; do
        # get the "help" variable name for this function
        help_var="_${func}_help"
        # use ${!<varname>} syntax to eval the help_var
        help=${!help_var}
        # If the help var had a value, echo its value here (the value is function help text)
        if [ ! -z "$help" ]; then
            # make the function name easy to spot
            setterm -foreground yellow -bold on
            echo -n "$func"
            # reset terminal formatting before printing the help text
            # (implicitly format it as normal text)
            setterm -default
            echo ": $help"
        fi
    done

    # explicitly restore terminal formatting is reset before exiting function
    setterm -default
}
_phelp_help="Print this help"

setup_crane_links() {
    # If Crane is present, let's set up the publishing symlinks so that the app files can be used
    if [ -d $HOME/devel/crane ]; then
        pushd $HOME/devel/crane
        mkdir -p metadata/v1 metadata/v2
        setfacl -m u:apache:rwx metadata/*
        sudo -u apache mkdir -p /var/lib/pulp/published/docker/v1 /var/lib/pulp/published/docker/v2
        sudo -u apache ln -s $HOME/devel/crane/metadata/v1 /var/lib/pulp/published/docker/v1/app
        sudo -u apache ln -s $HOME/devel/crane/metadata/v2 /var/lib/pulp/published/docker/v2/app
        popd
    fi
}

export DJANGO_SETTINGS_MODULE=pulp.server.webservices.settings
export CRANE_CONFIG_PATH=$HOME/devel/crane/crane.conf
