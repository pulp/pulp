# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions

# Set up virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export VIRTUALENV_USE_DISTRIBUTE=true
export PIP_RESPECT_VIRTUALENV=true
source /usr/bin/virtualenvwrapper.sh

pstart() {
    _paction start
}

pstop() {
    _paction stop
}

prestart() {
    _paction restart
}

pstatus() {
    _paction status
}

preset() {
    pstop;
    mongo pulp_database ~/drop_database.js;
    sudo rm -rf /var/lib/pulp/*;
    find ~/devel/pulp* -name '*.py[co]' -delete;
    sudo -u apache pulp-manage-db;
    # If Crane is present, let's set up the publishing symlinks so that the app files can be used
    if [ -d $HOME/devel/crane ]; then
        pushd $HOME/devel/crane
        mkdir -p metadata/v1 metadata/v2
        setfacl -m u:apache:rwx metadata/*
        sudo -u apache mkdir -p /var/lib/pulp/published/docker/v1 /var/lib/pulp/published/docker/v2
        sudo -u apache ln -s $HOME/devel/crane/metadata/v1 /var/lib/pulp/published/docker/v1/app
        sudo -u apache ln -s $HOME/devel/crane/metadata/v2 /var/lib/pulp/published/docker/v2/app
        popd
    fi
    pstart;
    ppopulate;
}

ptests() {
    pushd $HOME/devel;
    for r in {pulp,pulp_deb,pulp_docker,pulp_openstack,pulp_ostree,pulp_puppet,pulp_python,pulp_rpm}; do
        if [ -d $r ]; then
            pushd $r;
            workon $r;
            ./run-tests.py -x --enable-coverage;
            deactivate;
            popd;
        fi
    done;
    popd;
}

_paction() {
    sudo systemctl $1 goferd httpd pulp_workers pulp_celerybeat pulp_resource_manager
}

psmash() {
    # We start and end with {push,pop}d because workon changes CWD and we don't want to user's CWD
    # to be altered when they type pulp-smash.
    pushd ~;
    workon pulp-smash;
    prestart;
    python -m unittest2 discover ~/devel/pulp-smash/pulp_smash;
    deactivate;
    popd;
}

ppopulate() {
    if [ ! -f $HOME/.pulp/user-cert.pem ]; then
        pulp-admin login -u admin -p admin
    fi

    if [ -d $HOME/devel/pulp_docker ]; then
        pulp-admin docker repo create --repo-id busybox --feed https://index.docker.io \
            --upstream-name busybox
    fi

    if [ -d $HOME/devel/pulp_rpm ]; then
        pulp-admin rpm repo create --repo-id=zoo \
            --feed=https://repos.fedorapeople.org/repos/pulp/pulp/demo_repos/zoo/
    fi

    if [ -d $HOME/devel/pulp_puppet ]; then
        pulp-admin puppet repo create --repo-id=forge \
            --feed=http://forge.puppetlabs.com \
            --queries=torssh
    fi

    if [ -d $HOME/devel/pulp_python ]; then
        pulp-admin python repo create --repo-id=pypi \
            --feed=https://pypi.python.org/ \
            --package-names=pip
    fi
}

pprocs() {
    printf "Pulp Worker processes:\n"
    ps ax | grep "pulp.server.async.app -c 1" | grep -v grep | awk '{ print $1 }'

    printf "\nPulp Resource Manager processes:\n"
    ps ax | grep "pulp.server.async.app -n resource_manager" | grep -v grep | awk '{ print $1 }'

    printf "\nPulp Celerybeat processes:\n"
    ps ax | grep "pulp.server.async.celery_instance.celery" | grep -v grep | awk '{ print $1 }'

    printf "\nPulp WSGI processes:\n"
    ps ax | grep "wsgi:pulp" | grep -v grep | awk '{ print $1 }'
}

pdebug() {
    telnet 127.0.0.1 4444
}

export DJANGO_SETTINGS_MODULE=pulp.server.webservices.settings
export CRANE_CONFIG_PATH=$HOME/devel/crane/crane.conf
