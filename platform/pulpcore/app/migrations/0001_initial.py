# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-15 20:39
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pulpcore.app.fields
import pulpcore.app.models.auth
import pulpcore.app.models.content
import pulpcore.app.models.publication
import pulpcore.app.models.storage
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=150, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], verbose_name='username')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', pulpcore.app.models.auth.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Artifact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(max_length=255, upload_to=pulpcore.app.models.content.Artifact.storage_path)),
                ('size', models.IntegerField()),
                ('md5', models.CharField(db_index=True, max_length=32)),
                ('sha1', models.CharField(db_index=True, max_length=40)),
                ('sha224', models.CharField(db_index=True, max_length=56)),
                ('sha256', models.CharField(db_index=True, max_length=64, unique=True)),
                ('sha384', models.CharField(db_index=True, max_length=96, unique=True)),
                ('sha512', models.CharField(db_index=True, max_length=128, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('key', models.TextField()),
                ('value', models.TextField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Consumer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(db_index=True, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.TextField(default=None)),
            ],
            options={
                'verbose_name_plural': 'content',
            },
        ),
        migrations.CreateModel(
            name='ContentArtifact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relative_path', models.CharField(max_length=64)),
                ('artifact', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pulp_app.Artifact')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pulp_app.Content')),
            ],
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('base_path', models.CharField(max_length=255, unique=True)),
                ('auto_updated', models.BooleanField(default=True)),
                ('http', models.BooleanField(default=True)),
                ('https', models.BooleanField(default=True)),
            ],
            options={
                'default_related_name': 'distributions',
            },
        ),
        migrations.CreateModel(
            name='Importer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.TextField(default=None)),
                ('name', models.TextField(db_index=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('feed_url', models.TextField()),
                ('validate', models.BooleanField(default=True)),
                ('ssl_ca_certificate', models.FileField(blank=True, max_length=255, upload_to=pulpcore.app.models.storage.TLSLocation('ca.pem'))),
                ('ssl_client_certificate', models.FileField(blank=True, max_length=255, upload_to=pulpcore.app.models.storage.TLSLocation('certificate.pem'))),
                ('ssl_client_key', models.FileField(blank=True, max_length=255, upload_to=pulpcore.app.models.storage.TLSLocation('key.pem'))),
                ('ssl_validation', models.BooleanField(default=True)),
                ('proxy_url', models.TextField(blank=True)),
                ('username', models.TextField(blank=True)),
                ('password', models.TextField(blank=True)),
                ('download_policy', models.TextField(choices=[('immediate', 'Update the repository content and download all artifacts immediately.'), ('on_demand', 'Update the repository content but no artifacts are downloaded.'), ('background', 'Update the repository content and download artifacts in the background.')])),
                ('sync_mode', models.TextField(choices=[('additive', 'Add new content from the remote repository.'), ('mirror', 'Add new content and remove content is no longer in the remote repository.')])),
                ('last_synced', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'default_related_name': 'importers',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_id', models.UUIDField()),
                ('key', models.TextField()),
                ('value', models.TextField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProgressReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('state', models.TextField(choices=[('waiting', 'Waiting'), ('skipped', 'Skipped'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('canceled', 'Canceled')], default='waiting')),
                ('total', models.IntegerField(null=True)),
                ('done', models.IntegerField(default=0)),
                ('suffix', models.TextField(default='')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublishedArtifact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relative_path', models.CharField(max_length=255)),
                ('content_artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='published_artifact', to='pulp_app.ContentArtifact')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='published_artifact', to='pulp_app.Publication')),
            ],
            options={
                'default_related_name': 'published_artifact',
            },
        ),
        migrations.CreateModel(
            name='PublishedMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('relative_path', models.CharField(max_length=255)),
                ('file', models.FileField(max_length=255, upload_to=pulpcore.app.models.publication.PublishedMetadata._storage_path)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='published_metadata', to='pulp_app.Publication')),
            ],
            options={
                'default_related_name': 'published_metadata',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.TextField(default=None)),
                ('name', models.TextField(db_index=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('auto_publish', models.BooleanField(default=True)),
                ('last_published', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'default_related_name': 'publishers',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RemoteArtifact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.TextField(blank=True, validators=[django.core.validators.URLValidator])),
                ('size', models.IntegerField(blank=True, null=True)),
                ('md5', models.CharField(blank=True, max_length=32, null=True)),
                ('sha1', models.CharField(blank=True, max_length=40, null=True)),
                ('sha224', models.CharField(blank=True, max_length=56, null=True)),
                ('sha256', models.CharField(blank=True, max_length=64, null=True)),
                ('sha384', models.CharField(blank=True, max_length=96, null=True)),
                ('sha512', models.CharField(blank=True, max_length=128, null=True)),
                ('content_artifact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pulp_app.ContentArtifact')),
                ('importer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pulp_app.Importer')),
            ],
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(db_index=True, unique=True)),
                ('description', models.TextField(blank=True)),
                ('last_content_added', models.DateTimeField(blank=True, null=True)),
                ('last_content_removed', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'repositories',
            },
        ),
        migrations.CreateModel(
            name='RepositoryContent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pulp_app.Content')),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pulp_app.Repository')),
            ],
        ),
        migrations.CreateModel(
            name='ReservedResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resource', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('group', models.UUIDField(null=True)),
                ('state', models.TextField(choices=[('waiting', 'Waiting'), ('skipped', 'Skipped'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('canceled', 'Canceled')])),
                ('started_at', models.DateTimeField(null=True)),
                ('finished_at', models.DateTimeField(null=True)),
                ('non_fatal_errors', pulpcore.app.fields.JSONField(default=list)),
                ('error', pulpcore.app.fields.JSONField(null=True)),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spawned_tasks', to='pulp_app.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskLock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(db_index=True, unique=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('lock', models.TextField(choices=[('CeleryBeat', 'Celery Beat Lock'), ('ResourceManager', 'Resource Manager Lock')], unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', related_query_name='tag', to='pulp_app.Task')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(db_index=True, unique=True)),
                ('last_heartbeat', models.DateTimeField(auto_now=True)),
                ('online', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='task',
            name='worker',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='pulp_app.Worker'),
        ),
        migrations.AddField(
            model_name='reservedresource',
            name='task',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pulp_app.Task'),
        ),
        migrations.AddField(
            model_name='reservedresource',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='pulp_app.Worker'),
        ),
        migrations.AddField(
            model_name='repository',
            name='content',
            field=models.ManyToManyField(related_name='repositories', through='pulp_app.RepositoryContent', to='pulp_app.Content'),
        ),
        migrations.AddField(
            model_name='publisher',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publishers', to='pulp_app.Repository'),
        ),
        migrations.AddField(
            model_name='publication',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pulp_app.Publisher'),
        ),
        migrations.AddField(
            model_name='progressreport',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_reports', to='pulp_app.Task'),
        ),
        migrations.AddField(
            model_name='importer',
            name='repository',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='importers', to='pulp_app.Repository', unique=True),
        ),
        migrations.AddField(
            model_name='distribution',
            name='publication',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='distributions', to='pulp_app.Publication'),
        ),
        migrations.AddField(
            model_name='distribution',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distributions', to='pulp_app.Publisher'),
        ),
        migrations.AddField(
            model_name='content',
            name='artifacts',
            field=models.ManyToManyField(through='pulp_app.ContentArtifact', to='pulp_app.Artifact'),
        ),
        migrations.AddField(
            model_name='consumer',
            name='publishers',
            field=models.ManyToManyField(related_name='consumers', to='pulp_app.Publisher'),
        ),
        migrations.CreateModel(
            name='ProgressBar',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('pulp_app.progressreport',),
        ),
        migrations.CreateModel(
            name='ProgressSpinner',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('pulp_app.progressreport',),
        ),
        migrations.AlterUniqueTogether(
            name='repositorycontent',
            unique_together=set([('repository', 'content')]),
        ),
        migrations.AlterUniqueTogether(
            name='remoteartifact',
            unique_together=set([('content_artifact', 'importer')]),
        ),
        migrations.AlterUniqueTogether(
            name='publisher',
            unique_together=set([('repository', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='publishedmetadata',
            unique_together=set([('publication', 'file')]),
        ),
        migrations.AlterUniqueTogether(
            name='publishedartifact',
            unique_together=set([('publication', 'content_artifact')]),
        ),
        migrations.AlterUniqueTogether(
            name='notes',
            unique_together=set([('key', 'content_type', 'object_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='importer',
            unique_together=set([('repository', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='distribution',
            unique_together=set([('publisher', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='contentartifact',
            unique_together=set([('content', 'relative_path')]),
        ),
    ]
